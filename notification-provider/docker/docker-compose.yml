version: "3.1"
services:
  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - "${PERSISTENT_VOLUME_PATH}:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: bitnami/kafka:3.4
    container_name: kafka
    ports:
      - '9094:9094'
    volumes:
      - "${PERSISTENT_VOLUME_PATH}:/bitnami"
    environment:
        - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
        - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
        - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
        - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
    depends_on:
      - zookeeper
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8055:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - zookeeper
      - kafka
  postgres:
    image: postgres:15.4
    container_name: notification-provider-db
    ports:
      - "5437:5432"
    volumes:
      - "${POSTGRES_DATA_PATH}:/var/lib/postgresql/data"
      - "./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql"
    environment:
      POSTGRES_DB: orders_system
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres